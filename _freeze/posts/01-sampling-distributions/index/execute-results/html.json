{
  "hash": "da217dcc4288e8b6b7a6f0ce7371ff73",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Sampling Distribution\"\ndate: \"01-29-2025\"\nformat: html\ncategories:\n  - mini-project\n---\n\n\n\n# Mini-Project 1: Sampling Distribution of the Sample Minimum and Maximum\n\nCarry out simulations of the sampling distributions of the sample minimum ($Y_{min}$) and the sample maximum ($Y_{max}$) when taking samples of size $n = 5$ from different populations (specified below). Fill in the summary table in this document and use it answer the questions that follow.\n\n## Statement of Integrity\n“I have followed all rules for collaboration for this project, and I have not used generative AI on this project.”\n\nNorah Kuduk\n\n## Population Distributions\n\n\n::: {.cell warnings='false'}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(gridExtra)\nlibrary(knitr)\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\n\n## Normal Distribution \n\n$\\text{N}(\\mu = 10, \\sigma^2 = 4)$\n\n### Simulated Distribution of the Sample Minimum (Normal)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn <- 5            # sample size\nmu <- 10          # population mean\nsigma <- 2        # population standard deviation\n\ngenerate_normal_min <- function(mu, sigma, n) {\n  \n  single_sample <- rnorm(n, mu, sigma)\n  sample_min <- min(single_sample)\n  \n  return(sample_min)\n}\n\nnsim <- 5000      # number of simulations\n\n## code to map through the function. \n## the \\(i) syntax says to just repeat the generate_normal_mean function\n## nsim times\nnormal_mins <- map_dbl(1:nsim, \\(i) generate_normal_min(mu = mu, sigma = sigma, n = n))\n\n## print some of the 5000 means\n## each number represents the sample mean from __one__ sample.\nnormal_mins_df <- tibble(normal_mins)\n\nnormal_min_plot <- ggplot(data = normal_mins_df, aes(x = normal_mins)) +\n  geom_histogram(colour = \"paleturquoise4\", fill = \"paleturquoise2\", bins = 20) +\n  theme_minimal() +\n  labs(x = \"Observed Sample Mins\",\n       title = paste(\"Normal Sampling Distribution of the \\nSample Min when n =\", n))\n\nkable(normal_mins_df |>\n  summarise(mean_samp_dist = mean(normal_mins),\n            var_samp_dist = var(normal_mins),\n            se_samp_dist = sd(normal_mins)))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in attr(x, \"align\"): 'xfun::attr()' is deprecated.\nUse 'xfun::attr2()' instead.\nSee help(\"Deprecated\")\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in attr(x, \"format\"): 'xfun::attr()' is deprecated.\nUse 'xfun::attr2()' instead.\nSee help(\"Deprecated\")\n```\n\n\n:::\n\n::: {.cell-output-display}\n\n\n| mean_samp_dist| var_samp_dist| se_samp_dist|\n|--------------:|-------------:|------------:|\n|       7.671987|      1.844411|     1.358091|\n\n\n:::\n:::\n\n\n\n### Simulated Distribution of the Sample Maximum (Normal)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn <- 5            # sample size\nmu <- 10          # population mean\nsigma <- 2        # population standard deviation\n\ngenerate_normal_max <- function(mu, sigma, n) {\n  \n  single_sample <- rnorm(n, mu, sigma)\n  sample_max <- max(single_sample)\n  \n  return(sample_max)\n}\n\nnsim <- 5000  \n\nnormal_maxs <- map_dbl(1:nsim, \\(i) generate_normal_max(mu = mu, sigma = sigma, n = n))\n\nnormal_maxs_df <- tibble(normal_maxs)\n\nnormal_max_plot <- ggplot(data = normal_maxs_df, aes(x = normal_maxs)) +\n  geom_histogram(colour = \"paleturquoise4\", fill = \"paleturquoise2\", bins = 20) +\n  theme_minimal() +\n  labs(x = \"Observed Sample maxs\",\n       title = paste(\"Normal Sampling Distribution of the \\nSample max when n =\", n))\n\nkable(normal_maxs_df |>\n  summarise(mean_samp_dist = mean(normal_maxs),\n            var_samp_dist = var(normal_maxs),\n            se_samp_dist = sd(normal_maxs)))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in attr(x, \"align\"): 'xfun::attr()' is deprecated.\nUse 'xfun::attr2()' instead.\nSee help(\"Deprecated\")\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in attr(x, \"format\"): 'xfun::attr()' is deprecated.\nUse 'xfun::attr2()' instead.\nSee help(\"Deprecated\")\n```\n\n\n:::\n\n::: {.cell-output-display}\n\n\n| mean_samp_dist| var_samp_dist| se_samp_dist|\n|--------------:|-------------:|------------:|\n|       12.34545|      1.814956|     1.347203|\n\n\n:::\n:::\n\n\n\n## Uniform Distribution\n\n$\\text{Unif}(\\theta_1 = 7, \\theta_2 = 13)$\n\n### Simulated Distribution of the Sample Minimum (Uniform)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn <- 5        \ntheta_1 <- 7         \ntheta_2 <- 13        \n\ngenerate_uniform_min <- function(theta_1, theta_2, n) {\n  \n  single_sample <- runif(n, theta_1, theta_2)\n  sample_min <- min(single_sample)\n  \n  return(sample_min)\n}\n\nnsim <- 5000\n\nuniform_mins <- map_dbl(1:nsim, \\(i) generate_uniform_min(theta_1 = theta_1, theta_2 = theta_2, n = n))\n\nuniform_mins_df <- tibble(uniform_mins)\n\nuniform_min_plot <- ggplot(data = uniform_mins_df, aes(x = uniform_mins)) +\n  geom_histogram(colour = \"paleturquoise4\", fill = \"paleturquoise2\", bins = 20) +\n  theme_minimal() +\n  labs(x = \"Observed Sample Mins\",\n       title = paste(\"Uniform Sampling Distribution of the \\nSample Min when n =\", n))\n\nkable(uniform_mins_df |>\n  summarise(mean_samp_dist = mean(uniform_mins),\n            var_samp_dist = var(uniform_mins),\n            se_samp_dist = sd(uniform_mins)))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in attr(x, \"align\"): 'xfun::attr()' is deprecated.\nUse 'xfun::attr2()' instead.\nSee help(\"Deprecated\")\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in attr(x, \"format\"): 'xfun::attr()' is deprecated.\nUse 'xfun::attr2()' instead.\nSee help(\"Deprecated\")\n```\n\n\n:::\n\n::: {.cell-output-display}\n\n\n| mean_samp_dist| var_samp_dist| se_samp_dist|\n|--------------:|-------------:|------------:|\n|       7.996008|     0.7146795|    0.8453872|\n\n\n:::\n:::\n\n\n\n### Simulated Distribution of the Sample Maximum (Uniform)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn <- 5    \ntheta_1 <- 7         \ntheta_2 <- 13        \n\ngenerate_uniform_max <- function(theta_1, theta_2, n) {\n  \n  single_sample <- runif(n, theta_1, theta_2)\n  sample_max <- max(single_sample)\n  \n  return(sample_max)\n}\n\nnsim <- 5000\n\nuniform_maxs <- map_dbl(1:nsim, \\(i) generate_uniform_max(theta_1 = theta_1, theta_2 = theta_2, n = n))\n\nuniform_maxs_df <- tibble(uniform_maxs)\n\nuniform_max_plot <- ggplot(data = uniform_maxs_df, aes(x = uniform_maxs)) +\n  geom_histogram(colour = \"paleturquoise4\", fill = \"paleturquoise2\", bins = 20) +\n  theme_minimal() +\n  labs(x = \"Observed Sample maxs\",\n       title = paste(\"Uniform Sampling Distribution of the \\nSample Max when n =\", n))\n\nkable(uniform_maxs_df |>\n  summarise(mean_samp_dist = mean(uniform_maxs),\n            var_samp_dist = var(uniform_maxs),\n            se_samp_dist = sd(uniform_maxs)))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in attr(x, \"align\"): 'xfun::attr()' is deprecated.\nUse 'xfun::attr2()' instead.\nSee help(\"Deprecated\")\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in attr(x, \"format\"): 'xfun::attr()' is deprecated.\nUse 'xfun::attr2()' instead.\nSee help(\"Deprecated\")\n```\n\n\n:::\n\n::: {.cell-output-display}\n\n\n| mean_samp_dist| var_samp_dist| se_samp_dist|\n|--------------:|-------------:|------------:|\n|       12.01102|     0.6881612|    0.8295548|\n\n\n:::\n:::\n\n\n\n## Exponential Distribution\n\n$\\text{Exp}(\\lambda = 0.5)$\n\n### Simulated Distribution of the Sample Minimum (exponential)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn <- 5            \nlambda <- 0.5      \n\ngenerate_exponential_min <- function(lambda, n) {\n  \n  single_sample <- rexp(n, lambda)\n  sample_min <- min(single_sample)\n  \n  return(sample_min)\n}\n\nnsim <- 5000     \n\nexponential_mins <- map_dbl(1:nsim, \\(i) generate_exponential_min(lambda = lambda, n = n))\n\nexponential_mins_df <- tibble(exponential_mins)\n\nexponential_min_plot <- ggplot(data = exponential_mins_df, aes(x = exponential_mins)) +\n  geom_histogram(colour = \"paleturquoise4\", fill = \"paleturquoise2\", bins = 20) +\n  theme_minimal() +\n  labs(x = \"Observed Sample Mins\",\n       title = paste(\"Exponential Sampling Distribution of the \\nSample Min when n =\", n))\n\nkable(exponential_mins_df |>\n  summarise(mean_samp_dist = mean(exponential_mins),\n            var_samp_dist = var(exponential_mins),\n            se_samp_dist = sd(exponential_mins)))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in attr(x, \"align\"): 'xfun::attr()' is deprecated.\nUse 'xfun::attr2()' instead.\nSee help(\"Deprecated\")\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in attr(x, \"format\"): 'xfun::attr()' is deprecated.\nUse 'xfun::attr2()' instead.\nSee help(\"Deprecated\")\n```\n\n\n:::\n\n::: {.cell-output-display}\n\n\n| mean_samp_dist| var_samp_dist| se_samp_dist|\n|--------------:|-------------:|------------:|\n|      0.4167211|     0.1682203|    0.4101467|\n\n\n:::\n:::\n\n\n\n### Simulated Distribution of the Sample Maximum (exponential)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn <- 5        \nlambda <- 0.5    \n\ngenerate_exponential_max <- function(lambda, n) {\n  \n  single_sample <- rexp(n, lambda)\n  sample_max <- max(single_sample)\n  \n  return(sample_max)\n}\n\nnsim <- 5000\n\nexponential_maxs <- map_dbl(1:nsim, \\(i) generate_exponential_max(lambda = lambda, n = n))\n\nexponential_maxs_df <- tibble(exponential_maxs)\n\nexponential_max_plot <- ggplot(data = exponential_maxs_df, aes(x = exponential_maxs)) +\n  geom_histogram(colour = \"paleturquoise4\", fill = \"paleturquoise2\", bins = 20) +\n  theme_minimal() +\n  labs(x = \"Observed Sample maxs\",\n       title = paste(\"Exponential Sampling Distribution of the \\nSample Max when n =\", n))\n\nkable(exponential_maxs_df |>\n  summarise(mean_samp_dist = mean(exponential_maxs),\n            var_samp_dist = var(exponential_maxs),\n            se_samp_dist = sd(exponential_maxs)))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in attr(x, \"align\"): 'xfun::attr()' is deprecated.\nUse 'xfun::attr2()' instead.\nSee help(\"Deprecated\")\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in attr(x, \"format\"): 'xfun::attr()' is deprecated.\nUse 'xfun::attr2()' instead.\nSee help(\"Deprecated\")\n```\n\n\n:::\n\n::: {.cell-output-display}\n\n\n| mean_samp_dist| var_samp_dist| se_samp_dist|\n|--------------:|-------------:|------------:|\n|       4.528218|      5.799389|     2.408192|\n\n\n:::\n:::\n\n\n\n\n## Beta Distribution\n\n$\\text{Beta}(\\alpha = 8, \\beta = 2)$\n\n### Simulated Distribution of the Sample Minimum (Beta)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn <- 5            # sample size\nalpha <- 8\nbeta <- 2\n\ngenerate_beta_min <- function(alpha, beta, n) {\n  \n  single_sample <- rbeta(n, alpha, beta)\n  sample_min <- min(single_sample)\n  \n  return(sample_min)\n}\n\nnsim <- 5000  \n\nbeta_mins <- map_dbl(1:nsim, \\(i) generate_beta_min(alpha = alpha, beta = beta, n = n))\n\nbeta_mins_df <- tibble(beta_mins)\n\nbeta_min_plot <- ggplot(data = beta_mins_df, aes(x = beta_mins)) +\n  geom_histogram(colour = \"paleturquoise4\", fill = \"paleturquoise2\", bins = 20) +\n  theme_minimal() +\n  labs(x = \"Observed Sample Mins\",\n       title = paste(\"Beta Sampling Distribution of the \\nSample Min when n =\", n))\n\nkable(beta_mins_df |>\n  summarise(mean_samp_dist = mean(beta_mins),\n            var_samp_dist = var(beta_mins),\n            se_samp_dist = sd(beta_mins)))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in attr(x, \"align\"): 'xfun::attr()' is deprecated.\nUse 'xfun::attr2()' instead.\nSee help(\"Deprecated\")\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in attr(x, \"format\"): 'xfun::attr()' is deprecated.\nUse 'xfun::attr2()' instead.\nSee help(\"Deprecated\")\n```\n\n\n:::\n\n::: {.cell-output-display}\n\n\n| mean_samp_dist| var_samp_dist| se_samp_dist|\n|--------------:|-------------:|------------:|\n|      0.6456803|     0.0111961|    0.1058116|\n\n\n:::\n:::\n\n\n\n### Simulated Distribution of the Sample Maximum (Beta)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn <- 5            # sample size\nalpha <- 8\nbeta <- 2\n\ngenerate_beta_max <- function(alpha, beta, n) {\n  \n  single_sample <- rbeta(n, alpha, beta)\n  sample_max <- max(single_sample)\n  \n  return(sample_max)\n}\n\nnsim <- 5000  \n\nbeta_maxs <- map_dbl(1:nsim, \\(i) generate_beta_max(alpha = alpha, beta = beta, n = n))\n\nbeta_maxs_df <- tibble(beta_maxs)\n\nbeta_max_plot <- ggplot(data = beta_maxs_df, aes(x = beta_maxs)) +\n  geom_histogram(colour = \"paleturquoise4\", fill = \"paleturquoise2\", bins = 20) +\n  theme_minimal() +\n  labs(x = \"Observed Sample Mins\",\n       title = paste(\"Beta Sampling Distribution of the \\nSample Max when n =\", n))\n\nkable(beta_maxs_df |>\n  summarise(mean_samp_dist = mean(beta_maxs),\n            var_samp_dist = var(beta_maxs),\n            se_samp_dist = sd(beta_maxs)))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in attr(x, \"align\"): 'xfun::attr()' is deprecated.\nUse 'xfun::attr2()' instead.\nSee help(\"Deprecated\")\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in attr(x, \"format\"): 'xfun::attr()' is deprecated.\nUse 'xfun::attr2()' instead.\nSee help(\"Deprecated\")\n```\n\n\n:::\n\n::: {.cell-output-display}\n\n\n| mean_samp_dist| var_samp_dist| se_samp_dist|\n|--------------:|-------------:|------------:|\n|      0.9205054|     0.0021988|    0.0468911|\n\n\n:::\n:::\n\n\n\n## Histograms for Sample Minimums\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n\n## Histograms for Sample Maximums\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n\n## Table of Results\n\n|  |  $\\text{N}(\\mu = 10, \\sigma^2 = 4)$  | $\\text{Unif}(\\theta_1 = 7, \\theta_2 = 13)$ | $\\text{Exp}(\\lambda = 0.5)$ | $\\text{Beta}(\\alpha = 8, \\beta = 2)$ |\n|:----:|:-----------------:|:-------------:|:------------:|:------------:|\n| $\\text{E}(Y_{min})$    | 7.67      | 8.00       | 0.392      |  0.648            |\n| $\\text{E}(Y_{max})$    | 12.4      | 12.0       |  4.55      |  0.921             |\n|                        |       |        |       |              | \n| $\\text{SE}(Y_{min})$   | 1.33      | 0.862       |  0.389      |     0.106          |\n| $\\text{SE}(Y_{max})$   | 1.33      | 0.839       |  2.43      |  0.0459            |\n: Table of Results {.striped .hover}\n\n## Summary\n\nFor the Normal population model we can see that the $SE(Y_{min})$ and $SE(Y_{max})$ are equal, meaning that the min and max values of a sample have the same (or similar) standard error. For the Uniform model, the  $SE(Y_{min})$ and $SE(Y_{max})$ are very similar (within 0.35), which also indicates that taking the min or the max has no effect of the variation of the sampling distribution. For the Exponential model, the $SE(Y_{min})$ is much lower than the $SE(Y_{max})$, which indicates that there is less variation in the lowest values of a sample, while there is more variation in the opposite. The reverse is true for the Beta model, as the $SE(Y_{min})$ is much higher than the $SE(Y_{max})$, indicating greater variation in minimum values of a sample. \n\nFrom these observations, we can use the population distribution model graphs at the top of this file to make some conclusions about how the $SE(Y_{min})$ and $SE(Y_{max})$ values compare. For symmetric models like the Normal and the Uniform, there should be little to no variation in the $SE(Y_{min})$ and $SE(Y_{max})$ values. However, for skewed models like Exponential and Beta, we should expect a difference. To go further, a right-skewed model (like the Exponential distribution) will have less variation in the minimum, while a left-skewed model (like the Beta model), will have less variation in the maximum.\n\n## Exponential Population Model\n\n### pdf of Ymin\n\nThe pdf of any Exponential population is $\\lambda e^{-\\lambda y}$ for $y \\ge 0$\n\nFor $Y \\sim  Exp(\\lambda = 0.5)$\n\n$f(y) 0.5e^{-0.5y}$ for $y \\ge 0$\n\n$F(y) = \\int_{0}^{x} 0.5e^{-0.5y} = 1 - e^{-0.5 y}$ for $y \\ge 0$\n\n$f_{min}(y) = n(1-F(y))^{n-1} \\times f(y)$\n\n$f_{min}(y) = n(1-(1 - e^{-\\lambda y})^{n-1} \\lambda e^{-\\lambda y}$ \n\n$f_{min}(y) = n(e^{-\\lambda y})^{n-1}\\lambda e^{-\\lambda y}$ \n\n$f_{min}(y) = n\\lambda e^{-n\\lambda y + \\lambda y}e^{-\\lambda y}$ \n\n$f_{min}(y) = n\\lambda e^{-n\\lambda y}$ where $n = 5, \\lambda = 0.5$\n\n$f_{min}(y) = 2.5e^{-2.5y}$ for $y \\ge 0$\n\nThis is the same as $Y_{min} \\sim Exp(\\lambda = 2.5)$\n\n$E(Y_{min}) = \\frac{1}{\\lambda} = \\frac{1}{2.5} = 0.4$\n\n$SE(Y_{min}) = \\sqrt{Var(Y_{min})} = \\sqrt{\\frac{1}{\\lambda^2}} = \\sqrt{\\frac{1}{2.5^2}} = 0.4$\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n\n### pdf of Ymax\n\nThe pdf of any Exponential population is $\\lambda e^{-\\lambda y}$ for $y \\ge 0$\n\nFor $Y \\sim  Exp(\\lambda = 0.5)$\n\n$f(y) 0.5e^{-0.5y}$ for $y \\ge 0$\n\n$F(y) = \\int_{0}^{x} 0.5e^{-0.5y} = 1 - e^{-0.5 y}$ for $y \\ge 0$\n\n$f_{max}(y) = nF(y)^{n-1} \\times f(y)$\n\n$f_{max}(y) = n(1 - e^{-\\lambda y})^{n-1} \\lambda e^{-\\lambda y}$ \n\n$f_{max}(y) = 2.5(1 - e^{-0.5 y})^{4} e^{-0.5 y}$ for $y \\ge 0$\n\n$E(Y_{max}) = \\int_0^\\infty y_{max}2.5(1 - e^{-0.5 y_{max}})^{4} e^{-0.5 y_{max}} = 4.566$\n\n$Var(Y_{max}) = E(Y_{max}^2) - [E(Y_{max})]^2$\n\n$E(Y_{max}^2) = \\int_0^\\infty y_{max}^2 2.5(1 - e^{-0.5 y_{max}})^{4} e^{-0.5 y_{max}} = 26.709$\n\n$Var(Y_{max}) = 26.709 - 4.566^2 = 5.86$\n\n$SE(Y_{max}) = \\sqrt{Var(Y_{max})} = \\sqrt{5.86} = 2.42$\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n\n### Analysis\n\n|  | Simulated  | Theoretical |\n|:----:|:-----------------:|:-------------:|\n| $\\text{E}(Y_{min})$    | 0.392      |  0.4       | \n| $\\text{E}(Y_{max})$    | 4.55      | 4.566       |  \n|                        |       |        | \n| $\\text{SE}(Y_{min})$   | 0.389      | 0.4       | \n| $\\text{SE}(Y_{max})$   | 2.43      | 2.42       |\n: Simulated v. Theoretical Answers {.striped .hover}\n\n\nWe can see that the simulated and theoretical answers are very close to each other. The $E(Y_{min})$ and $E(Y_{max})$ are almost identical, and the $SE(Y_{min})$ and $SE(Y_{max})$ are also very close. This implies that theoretical calculations are correct and that the simulated answers are also correct.\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}